import os

import pytest
from django.conf import settings
from django.urls import reverse

from acceptance_tests.pages.submission_page import SubmissionPage


@pytest.mark.acceptance
@pytest.mark.submission
class TestResearchSubmission:
    """
    Acceptance tests for the research submission workflow.

    These tests verify the multi-step form process for submitting research.
    """

    def test_complete_submission_workflow(
        self, client, browser, live_server, faculty_user
    ):
        """
        Test the complete research submission workflow using force_login.

        This test verifies that faculty users can:
        1. Be logged in via test client
        2. Navigate to the submission form using Selenium
        3. Complete the multi-step submission process
        4. Upload research files
        5. Submit a research project successfully
        """
        # 1. Log in user via test client and transfer cookie
        print(f"(Test) Forcing login for user: {faculty_user.username}")
        client.force_login(faculty_user)
        session_cookie = client.cookies.get(settings.SESSION_COOKIE_NAME)
        if not session_cookie:
            pytest.fail("Session cookie not found after force_login")

        home_url = f"{live_server.url}{reverse('home')}"
        print(f"(Test) Navigating browser to home: {home_url}")
        browser.get(home_url)
        browser.add_cookie(
            {
                "name": settings.SESSION_COOKIE_NAME,
                "value": session_cookie.value,
                "path": "/",
            }
        )
        print("(Test) Session cookie added for Selenium.")

        # 2. Navigate to the submission form
        submission_page = SubmissionPage(browser, live_server.url)
        submission_page.navigate()

        # --- Define test data ---
        test_data = {
            "title": "SELENIUM Acceptance Test Project",  # Make title unique
            "student_author": "Selenium Student",
            "abstract": "This abstract is generated by an automated test and needs to be long enough. "
            "Selenium is driving the browser to fill out this multi-step form. "
            "This ensures the user workflow for submission is functional.",
            "collaborators": "Collaborator Bot",
            "date_presented": "2024-05-01",
            "github_link": "https://github.com/selenium/test-repo",
            "project_sponsor": "Pytest Sponsor",
            "video_link": "https://youtube.com/watch?v=seleniumtest",
            # Files need paths relative to fixtures dir
            "pdf_file": "test.pdf",
            "poster_file": "test.pdf",  # Reuse for now
            "presentation_file": "test.pdf",  # Reuse for now
        }

        # Construct absolute file paths
        current_dir = os.path.dirname(os.path.abspath(__file__))
        fixtures_dir = os.path.join(current_dir, "fixtures")
        pdf_abs_path = os.path.join(fixtures_dir, test_data["pdf_file"])
        poster_abs_path = os.path.join(fixtures_dir, test_data["poster_file"])
        pres_abs_path = os.path.join(fixtures_dir, test_data["presentation_file"])

        # Verify files exist
        assert os.path.exists(pdf_abs_path), f"PDF not found: {pdf_abs_path}"
        assert os.path.exists(poster_abs_path), (
            f"Poster file not found: {poster_abs_path}"
        )
        assert os.path.exists(pres_abs_path), (
            f"Presentation file not found: {pres_abs_path}"
        )

        # 3. Step 1: Fill out basic information
        submission_page.fill_basic_info(
            title=test_data["title"],
            student_author=test_data["student_author"],
            abstract=test_data["abstract"],
        )
        submission_page.go_to_step_2()

        # 4. Step 2: Fill out project details (includes video link now)
        submission_page.fill_project_details(
            collaborators=test_data["collaborators"],
            date_presented=test_data["date_presented"],
            github_link=test_data["github_link"],
            project_sponsor=test_data["project_sponsor"],
            video_link=test_data["video_link"],
        )
        submission_page.go_to_step_3()

        # 5. Step 3: Upload research materials (removed project images)
        submission_page.upload_files(
            pdf_path=pdf_abs_path,
            poster_path=poster_abs_path,
            presentation_path=pres_abs_path,
        )
        submission_page.go_to_step_4()

        # 6. Step 4: Review and submit
        # Optionally verify review data
        submission_page.verify_review_data(
            expected_title=test_data["title"],
            expected_author=test_data["student_author"],
            expected_abstract=test_data["abstract"],
        )
        submission_page.submit_project()

        # 7. Verify successful submission
        assert submission_page.SUCCESS_URL_PATH in browser.current_url, (
            f"Expected success URL '{submission_page.SUCCESS_URL_PATH}' not in '{browser.current_url}'"
        )

        success_text = submission_page.get_success_message()
        assert success_text is not None, "Success message container not found."
        assert "successfully submitted" in success_text.lower(), (
            f"Msg: '{success_text}'"
        )
        assert "pending approval" in success_text.lower(), f"Msg: '{success_text}'"

        print("(Test) Complete submission workflow test passed.")
